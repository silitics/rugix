//! Image configuration.

import foreign::NumBytes
import systems::Architecture
import systems::Target

/// Timestamp.
#[rust(type = "::jiff::Timestamp")]
#[json(type = "string")]
opaque Timestamp

/// Image configuration.
record ImageConfig {
    /// Layer the image is based on.
    layer: string,
    /// Architecture of the image.
    architecture: Architecture,
    /// Rugix Bakery target.
    target?: Target,
    /// Size of the image.
    size?: NumBytes,
    /// Layout of the image.
    layout?: ImageLayout,
}

/// Layout of an image.
record ImageLayout {
    /// Type of the partition table.
    #[json(name = "type")]
    ty?: PartitionTableType,
    /// Image partitions.
    partitions?: [ImagePartition],
}

/// Partition table type.
#[json(tagged=externally, rename_all = "lowercase")]
#[rust(derive(Copy, PartialEq, Eq, Hash))]
variant PartitionTableType {
    /// MBR partition.
    Mbr,
    /// GPT partition.
    Gpt,
}

/// Partition of an image.
record ImagePartition {
    /// Size of the partition.
    size?: NumBytes,
    /// Filesystem of the partition.
    filesystem?: Filesystem,
    /// Root directory to copy into the filesystem.
    root?: string,
    /// Type of the partition (GUID or MBR hex value).
    #[json(name = "type")]
    ty?: PartitionType,
}

/// Filesystem.
#[json(tag = "type", rename_all = "lowercase")]
variant Filesystem {
    /// EXT4
    Ext4: Ext4Options,
    /// Fat32
    Fat32,
    /// Squashfs
    Squashfs: SquashfsOptions,
}

#[json(rename_all = "kebab-case")]
record Ext4Options {
    additional_options?: [string],
    clamp_mtime?: Timestamp,
}

#[json(rename_all = "kebab-case")]
record SquashfsOptions {
    no_compression?: bool
}

/// Partition type.
#[rust(type = "::rugix_common::disk::PartitionType")]
#[json(type = "string")]
opaque PartitionType